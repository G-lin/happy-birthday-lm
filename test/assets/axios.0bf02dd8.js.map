{"version":3,"file":"axios.0bf02dd8.js","sources":["../../../src/utils/axios.js"],"sourcesContent":["/**引入axios*/\nimport axios from \"axios\";\n/**引入参数处理*/\nimport Qs from 'qs';\n/**引入vant组件*/\nimport {Toast} from 'vant';\n/*引入全局方法*/\nimport $function from './function'\n//引入封装的vant\nimport $vant from './vant';\n//引入router\nimport $router from '../router/index.js';\n\n//请求拦截器\naxios.interceptors.request.use(\n    config => {\n        return config;\n    },\n    error => {\n        // 对请求错误的处理\n        return Promise.reject(error);\n    }\n);\n\n/**\n *\n * 封装axios请求\n *\n * @param isLock 启用锁，解决短时间多次点击,开启后相同的请求不会提交\n * @param allUrl 请求的url为完整url\n * @param allSuccess 返回所有成功回调,不包含status不是200的出错请求\n * @param url 请求地址\n * @param method 请求方式\n * @param contentType 请求头contentType\n * @param data 请求参数\n * @param timeout 请求超时时间---某些请求需要单独设置超时时间\n * @param timeShowLoadAnimation 多长时间之后显示加载中动画,单位毫秒\n * @param success 成功回调\n * @param fail 失败回调\n */\nconst myAxios = function (\n    {\n        isLock = false,\n        allUrl = false,\n        allSuccess = false,\n        url = '',\n        method = 'get',\n        contentType = 'application/x-www-form-urlencoded; charset=UTF-8',\n        data = {},\n        timeout = parseInt(import.meta.env.VITE_APP_AXIOS_TIMEOUT || 20000),\n        timeShowLoadAnimation = 555,\n        success = function () {\n        },\n        fail = function () {\n        }\n    } = {}) {\n    //锁 key\n    let lockKey = null;\n    //开启锁\n    if (isLock) {\n        //创建key\n        lockKey = $function.md5(url + '_' + method + '_' + JSON.stringify(data));\n        //如果有值,代表请求中\n        if ($function.getSessionStorage(lockKey)) {\n            return;\n        }\n        //设置为true\n        $function.setSessionStorage(lockKey, true);\n    }\n    /**timeShowLoadAnimation时间之后开启加载中动画*/\n    let loading = null;\n    let loadingTimer = setTimeout(() => {\n        loading = Toast.loading({\n            message: '加载中...',\n            forbidClick: true,\n            duration: 0,\n        });\n        /*加载中页面无法操作，移除锁*/\n        if (isLock) {\n            $function.removeSessionStorage(lockKey);\n        }\n    }, timeShowLoadAnimation);\n    let _axios = {\n        //请求的url是否为全部url\n        url: allUrl ? url : (import.meta.env.VITE_APP_URL + url),\n        method,\n        headers: {\n            'Content-Type': contentType,\n            'token': $function.getLocationStorage('token')\n        },\n        timeout\n    };\n    /**axios请求参数添加随机字符串*/\n    data['__t'] = (new Date()).getTime();\n    /**axios请求处理不同请求方式时的参数*/\n    //如果是文件\n    if (contentType.includes('multipart/form-data')) {\n        _axios['data'] = data;\n    } else {\n        //不是文件\n        if ('GET' === method.toUpperCase()) {\n            _axios['params'] = data;\n        } else {\n            _axios['data'] = Qs.stringify(data, {indices: false});\n        }\n    }\n    axios(_axios).then((res) => {\n        /*移除锁*/\n        if (isLock) {\n            $function.removeSessionStorage(lockKey);\n        }\n        /**关闭加载中动画*/\n        clearTimeout(loadingTimer);\n        if (null != loading) {\n            loading.clear();\n        }\n        /***请求的url如果是全部url的话,返回所有res['data']响应***/\n        if (allUrl) {\n            try {\n                success(res['data']);\n            } catch (e) {\n                console.error(e);\n            }\n            return;\n        }\n        /**token过期处理*/\n        if (401 === res.data.code) {\n            $vant.errorMsg('登陆过期，自动登录中。。。');\n            let timer = setTimeout(() => {\n                clearTimeout(timer);\n                $router.replace('login');\n            }, 3000);\n            return;\n        }\n        /**返回所有成功回调,不包含status不是401的出错请求*/\n        if (allSuccess) {\n            try {\n                success(res.data);\n            } catch (e) {\n                console.error(e);\n            }\n            return;\n        }\n        /**处理code不为0的出错请求*/\n        if (200 !== res.data.code) {\n            $vant.errorMsg(res.data.msg);\n            consoleWarnTable(`请求出错url:${url}`, res['data']);\n            return;\n        }\n        /**成功回调*/\n        try {\n            success(res.data.data);\n        } catch (e) {\n            console.error(e);\n        }\n    }).catch((error) => {\n        /*移除锁*/\n        if (isLock) {\n            $function.removeSessionStorage(lockKey);\n        }\n        /**关闭加载中动画*/\n        clearTimeout(loadingTimer);\n        if (null != loading) {\n            loading.clear();\n        }\n        // 如果请求被取消则进入该方法\n        if (axios.isCancel(error)) {\n            try {\n                fail(error);\n            } catch (e) {\n                console.error(e);\n            }\n            return;\n        }\n        $vant.alert({\n            title: '系统异常',\n            message: (\n                `message:${error['message']}`\n                + `\\r\\n url:${url}`)\n        });\n        console.warn(`请求失败url:${url}`, error);\n        try {\n            fail(error);\n        } catch (e) {\n            console.error(e);\n        }\n    });\n}\n\n/**\n * 打印\n * @param msg\n * @param object\n */\nfunction consoleWarnTable(msg, object = {}) {\n    console.warn(msg);\n    try {\n        if (object instanceof Object) {\n            console.table(object);\n        } else {\n            console.log(object);\n        }\n    } catch (e) {\n        console.log('此浏览器不支持console.table()', e, '---错误详情:', object);\n    }\n    console.warn('↑↑以上为错误详情↑↑↑↑↑');\n}\n\n/**\n * 对外抛出\n */\nexport default myAxios;"],"names":["axios","interceptors","request","use","config","Promise","reject","error","myAxios","isLock","allUrl","allSuccess","url","method","contentType","data","timeout","parseInt","timeShowLoadAnimation","success","fail","lockKey","$function","md5","JSON","stringify","getSessionStorage","setSessionStorage","loading","loadingTimer","setTimeout","Toast","message","forbidClick","duration","removeSessionStorage","_axios","headers","Content-Type","token","getLocationStorage","Date","getTime","includes","toUpperCase","Qs","indices","then","res","clear","e","code","errorMsg","msg","object","warn","Object","table","log","timer","replace","catch","isCancel","alert","title"],"mappings":"2KAcAA,EAAMC,aAAaC,QAAQC,QAEZC,OAIAC,QAAQC,OAAOC,KAoBzB,MAACC,EAAU,UACZC,OACIA,GAAS,SACTC,GAAS,aACTC,GAAa,MACbC,EAAM,UACNC,EAAS,kBACTC,EAAc,wDACdC,EAAO,WACPC,EAAUC,SAAS,+BACnBC,EAAwB,YACxBC,EAAU,kBAEVC,EAAO,cAEP,QAEAC,EAAU,QAEVZ,EAAQ,MAEEa,EAAUC,IAAIX,EAAM,IAAMC,EAAS,IAAMW,KAAKC,UAAUV,IAE9DO,EAAUI,kBAAkBL,YAItBM,kBAAkBN,GAAS,OAGrCO,EAAU,KACVC,EAAeC,YAAW,OAChBC,EAAMH,QAAQ,CACpBI,QAAS,SACTC,aAAa,EACbC,SAAU,IAGVzB,KACU0B,qBAAqBd,KAEpCH,GACCkB,EAAS,CAETxB,IAAKF,EAASE,EAAO,kCAA+BA,EACpDC,OAAAA,EACAwB,QAAS,CACLC,eAAgBxB,EAChByB,MAASjB,EAAUkB,mBAAmB,UAE1CxB,QAAAA,UAGW,IAAIyB,MAAQC,UAGvB5B,EAAY6B,SAAS,8BACJ5B,EAGb,QAAUF,EAAO+B,uBACE7B,SAEF8B,EAAGpB,UAAUV,EAAM,CAAC+B,SAAS,MAGhDV,GAAQW,MAAMC,OAEZvC,KACU0B,qBAAqBd,gBAGtBQ,GACT,MAAQD,KACAqB,QAGRvC,QAEYsC,cACHE,WACG3C,MAAM2C,WAKlB,MAAAF,EAAYjC,KAAKoC,QASjBxC,QAEYqC,EAAIjC,YACPmC,WACG3C,MAAM2C,WAKlB,MAAAF,EAAYjC,KAAKoC,cACXC,SAASJ,EAAIjC,KAAKsC,UAiDpC,SAA0BA,EAAKC,EAAS,YAC5BC,KAAKF,OAELC,aAAkBE,eACVC,MAAMH,WAENI,IAAIJ,SAEXJ,WACGQ,IAAI,yBAA0BR,EAAG,WAAYI,WAEjDC,KAAK,mBA3DY,WAAW3C,IAAOoC,cAK3BA,EAAIjC,KAAKA,YACZmC,WACG3C,MAAM2C,WA1BRE,SAAS,qBACXO,EAAQ7B,YAAW,kBACN6B,KACLC,QAAQ,WACjB,SAwBRC,OAAOtD,OAEFE,KACU0B,qBAAqBd,gBAGtBQ,GACT,MAAQD,KACAqB,QAGRjD,EAAM8D,SAASvD,SAENA,SACA2C,WACG3C,MAAM2C,UAIhBa,MAAM,CACRC,MAAO,OACPhC,QACI,WAAWzB,qBACGK,cAEd2C,KAAK,WAAW3C,IAAOL,SAEtBA,SACA2C,WACG3C,MAAM2C"}